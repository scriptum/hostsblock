#!/bin/sh

script_path=$0
what_todo=$1
param2=$2

VER="1.2.3"
DESC="blocking manager"

HOSTS_ORIG=/etc/hosts.orig
HOSTS=/etc/hosts
HOSTS_SAVED=/etc/hosts.save
SCRIPTNAME=hostsblock
BIN_SCRIPT=/usr/bin/$SCRIPTNAME
CRON_DIR=/etc/cron.weekly
UPDATER=$CRON_DIR/$SCRIPTNAME
BLOCKLIST=/etc/hosts.blocklist

[ -z $EDITOR ] && EDITOR="vim"

reset_blocklist() {
  cat > $BLOCKLIST <<EOF
http://winhelp2002.mvps.org/hosts.txt
https://jansal.googlecode.com/svn/trunk/adblock/hosts
http://hosts-file.net/.%5Cad_servers.txt
http://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=0&mimetype=plaintext
EOF
}

remove() {
  echo "Removing $SCRIPTNAME..."
  rm -f $UPDATER $BIN_SCRIPT $BLOCKLIST &> /dev/null
  if [ -f "$HOSTS_ORIG" ]; then
    mv $HOSTS_ORIG $HOSTS
    sed -i "/$SCRIPTNAME/d" $HOSTS
  fi
}

bug_report() {
  echo 'If the problem still occurs, please report about it here:' 1>&2
  echo 'https://github.com/scriptum/hostsblock' 1>&2
}

update_blocklist() {
  echo "Updating the blocked list..."
  HOSTS_TMP=$(mktemp)
  TMP=$(mktemp)
  echo "### DO NOT EDIT THIS FILE! INSTEAD RUN \"sudo $SCRIPTNAME\" ###" > $HOSTS_TMP
  cat $HOSTS_ORIG | grep -v $SCRIPTNAME >> $HOSTS_TMP

  sed "/^$/d" $BLOCKLIST | while read line; do
    echo "Processing $line..."
    if curl -s "$line" > $TMP; then
      # - remove localhost and broadcasthost strings
      grep -vw localhost\|broadcasthost $TMP | \
      # - keep only IP
      grep ^[01] | \
      # - remove IP and comments (extract hosts only)
      sed -e 's/^[0127]*.0.0.[01]\s//' -e 's/#.*//' | \
      # - remove whitespaces, one host per line
      tr -d '\r' | tr ' \t' '\n' | \
      # - sort, remove duplicates
      grep -v ^$ | sort -u | \
      # - awk magic - optimize hosts size using aliases (max len = 160, max aliases = 9)
      awk '
        BEGIN {
          z=s="0.0.0.0"
        }
        {
          if(length(s) + length($1) > (160 - 1) || cnt >= 9) {
            print s;
            cnt=1;
            s=z " " $1
          } else {
            s=s " " $1;
            cnt++
          }
        }
        END {
          print s
        }' >> $HOSTS_TMP
    else
      echo "Error while downloading '$line'" 1>&2
      echo "Check your connection." 1>&2
      bug_report
    fi
  done
  rm -f $HOSTS $TMP
  mv $HOSTS_TMP $HOSTS
  chmod +r $HOSTS
}

on() {
  echo "Turning on..."
  mv $HOSTS $HOSTS_ORIG
  sed -i "1s/^/### DO NOT EDIT THIS FILE! INSTEAD RUN \"sudo $SCRIPTNAME\" ###\n/" $HOSTS_ORIG
  update_blocklist
}

off() {
  echo "Turning off..."
  mv $HOSTS $HOSTS_SAVED
  mv $HOSTS_ORIG $HOSTS
  sed -i "/$SCRIPTNAME/d" $HOSTS
  sed -i '/^$/d' $HOSTS
}

install() {
  echo "Installing $SCRIPTNAME ..."

  echo "Removing old version..."
  remove

  cp -f $script_path $BIN_SCRIPT
  chmod +x $BIN_SCRIPT

  reset_blocklist
  on

  echo "Creating a script for auto-updating the list of blocked hosts..."
  cat > $UPDATER <<EOF
#!/bin/sh
$SCRIPTNAME update
EOF
  chmod +x $UPDATER
}

status() {
  if [ -f $HOSTS_ORIG ]; then
    return 1
  else
    return 0
  fi
}

version() {
  awk -F'"' '/^VER/{print $2}' $BIN_SCRIPT
}

check() {
  if [ $(whoami) != "root" ]; then
    echo "You need to be root to perform this command." 1>&2
    echo "Run: \"sudo $script_path\"" 1>&2
    exit 1
  fi

  if [ ! -f $BIN_SCRIPT ]; then
    read -p "$SCRIPTNAME is not installed. Do you want to install it? (y/n) " answer
    if [ "$answer" != "y" && "$answer" != "yes" ]; then
      exit 1
    else
      # for updating from v. 1.0
      if [ -f /usr/bin/hostsblock-update ]; then
        rm -f /etc/cron.weekly/hostsblock-update
        rm -f /usr/bin/hostsblock-update
        if [ -f /etc/hosts.orig ]; then
          sed -i "/hostsblock-update/d" /etc/hosts.orig
          mv /etc/hosts.orig /etc/hosts
        fi
      fi
      install
    fi
  else
    VER_installed=$(version)
    if [ "$VER_installed" != "$VER" ]; then
      if [ "$VER_installed" != "$(printf "$VER_installed\n$VER" | sort | head -1)" ]; then
        echo "Error: You have $SCRIPTNAME v.$VER_installed. Version of the started instance is $VER" 1>&2
        echo "If you want to do smth run \"sudo $SCRIPTNAME\"" 1>&2
        exit 1
      else
        read -p "Do you want to update? v.$VER_installed --> v.$VER (y/n) " answer
        if [ $answer != "y" -a $answer != "yes" ]; then
          exit 1
        fi
      fi
      install
    fi
  fi

}

check

case $what_todo in
  remove)
    remove
    ;;
  update)
    if status; then
      echo "Error: $SCRIPTNAME has to be turned on before updating the blocklist" 1>&2
      exit 1
    else
      update_blocklist
    fi
    ;;
  on | start)
    if status; then
      on
    else
      echo "Already turned on"
    fi
    ;;
  off | stop)
    if status; then
      echo "Already turned off"
    else
      off
    fi
    ;;
  status)
    if status; then
      echo "$SCRIPTNAME is turned off"
    else
      echo "$SCRIPTNAME is turned on"
    fi
    ;;
  edit)
    if status; then
      $EDITOR $HOSTS
    else
      off
      $EDITOR $HOSTS
      on
    fi
    ;;
  version | -v | --version)
    echo "Current installed version is: $(version)"
    ;;
  *)
    cat <<EOF
Usage: $(basename "$script_path") ( on | off | update | status | remove | edit | version | help )
Blocking manager for removing ads from websites.

Description of commands:
  on | start            turn on $DESC
  off | stop            turn off $DESC
  update                update the list of blocked hosts
  status                find out the current status
  remove                remove
  edit                  edit /etc/hosts using \$EDITOR
  version               output version of installed $DESC and exit
  help                  display this help and exit
EOF
    ;;
esac
